import { Request, Response } from "express";
import { restaurant } from "../models/restaurant.model";
import uploadImageCloudinary from "../utils/imageUpload";

export const createRestaurant = async (req: Request, res: Response) => {
  try {
    const { restaurantName, city, country, deliveryTime, cuisines } = req.body;

    const file = req.file;
    let Restaurant = await restaurant.findOne({ user: req.userId });

    // we assumed that only one person can have one restaurant
    if (Restaurant) {
      res.status(400).json({
        success: false,
        message: "Restaurant already exist for this user",
      });
      return;
    }
    if (!file) {
      res.status(400).json({
        success: false,
        message: "Restaurant Banner is required",
      });
    }
    // received a url generated by cloudinary for uploaded banner image of restaurant
    const imageUrl = await uploadImageCloudinary(file as Express.Multer.File);

    Restaurant = await restaurant.create({
      user: req.userId,
      restaurantName,
      city,
      country,
      deliveryTime,
      imageUrl,
      cuisines: JSON.parse(cuisines),
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
};

export const updateRestaurant = async (req: Request, res: Response) => {
  const file = req.file;
  const { restaurantName, city, country, deliveryTime, cuisines } = req.body;
  try {
    const Restaurant = await restaurant.findOne({ user: req.userId });
    if (!Restaurant) {
      res.status(401).json({ success: false, message: "Restaurant not found" });
      return;
    }

    const imageUrl = file
      ? await uploadImageCloudinary(file as Express.Multer.File)
      : Restaurant.imageUrl;
    await restaurant.findOneAndUpdate(
      { user: req.userId },
      {
        imageUrl,
        restaurantName,
        city,
        country,
        deliveryTime,
        cuisines: JSON.parse(cuisines),
      }
    );
    res
      .status(200)
      .json({ success: true, message: "Restaurant updated successfully",restaurant });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Internal server error" });
  }
};
